Tightened the API of :func:`~rubicon.objc.runtime.send_message`, removing some previously allowed shortcuts and
features that were rarely used, or likely to be used by accident in an unsafe way.

.. note::

    In most cases, Rubicon's high-level method call syntax provided by :class:`~rubicon.objc.api.ObjCInstance` can be
    used instead of :func:`~rubicon.objc.runtime.send_message`. This syntax is almost always more convenient to use,
    more readable and less error-prone. :func:`~rubicon.objc.runtime.send_message` should only be used in cases
    not supported by the high-level syntax.

* Disallowed passing class names as :class:`str`/:class:`bytes` as the ``receiver`` argument of
  :func:`~rubicon.objc.runtime.send_message`. If you need to send a message to a class object (i. e. call a
  class method), use :class:`~rubicon.objc.api.ObjCClass` or :func:`~rubicon.objc.runtime.get_class` to look up
  the class, and pass the resulting :class:`~rubicon.objc.api.ObjCClass` or :class:`~rubicon.objc.runtime.Class` object
  as the receiver.
* Disallowed passing :class:`~ctypes.c_void_p` objects as the ``receiver`` argument of
  :func:`~rubicon.objc.runtime.send_message`. The ``receiver`` argument now has to be of type
  :class:`~rubicon.objc.runtime.objc_id`, or one of its subclasses (such as :class:`~rubicon.objc.runtime.Class`),
  or one of its high-level equivalents (such as :class:`~rubicon.objc.api.ObjCInstance`). All Objective-C objects
  returned by Rubicon's high-level and low-level APIs have one of these types. If you need to send a message to an
  object pointer stored as :class:`~ctypes.c_void_p`, :func:`~ctypes.cast` it to :class:`~rubicon.objc.runtime.objc_id`
  first.
* Removed default values for :func:`~rubicon.objc.runtime.send_message`'s ``restype`` and ``argtypes`` keyword
  arguments. Every :func:`~rubicon.objc.runtime.send_message` call now needs to have its return and argument types
  set explicitly. This ensures that all arguments and the return value are converted correctly between (Objective-)C
  and Python.
* Disallowed passing more argument values than there are argument types in ``argtypes``. This was previously allowed to
  support calling variadic methods - any arguments beyond the types set in ``argtypes`` would be passed as varargs.
  However, this feature was easy to misuse by accident, as it allowed passing extra arguments to *any* method,
  even though most Objective-C methods are not variadic. Extra arguments passed this way were silently ignored without
  causing an error or a crash.

  To prevent accidentally passing too many arguments like this, the number of arguments now has to exactly match
  the number of ``argtypes``. Variadic methods can still be called, but the varargs now need to be passed as a list
  into the separate ``varargs`` keyword arugment.

