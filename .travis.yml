branches:
  only:
    - master
os: osx
matrix:
  include:
    # OSX 10.11 El Capitan
    - osx_image: xcode7.3
    # macOS 10.12 Sierra
    - osx_image: xcode8.3
    - osx_image: xcode9.2
    # macOS 10.13 High Sierra
    - osx_image: xcode10.1
    # macOS 10.14 Mojave
    - osx_image: xcode10.2
language: generic
cache:
  directories:
    ~/.pyenv
install:
  # pyenv's shims directory is not in the PATH by default.
  - export PATH="$(pyenv root)/shims:${PATH}"
  # Diagnostic: Find out which versions of Python are availalbe.
  - pyenv install -l
  # Rubicon supports Python 3.5 and newer.
  # The most recent version of Python 3.5 provided by the pyenv install on
  # macOS 10.11 is 3.5.2. There are more recent versions of Python 3.5
  # available, but using them would mean updating pyenv, which takes 10+
  # minutes on macOS 10.11.
  - pyenv install --skip-existing 3.5.2
  - pyenv global 3.5.2
  - python -m pip install --upgrade pip setuptools
  - python -m pip install .
script:
  - make -f Makefile
  # This next line *should* be:
  #   DYLD_LIBRARY_PATH=tests/objc python setup.py test
  # but the way Travis invokes Python through pyenv triggers macOS's System
  # Integrity Protection (SIP) (see https://apple.stackexchange.com/a/216815).
  # As a result, DYLD_LIBRARY_PATH isn't exposed to the Python process.
  # Calling `$(pyenv which python)` instead of `python` uses a direct version
  # of the python executable rather than the pyenv shims (which take a
  # circuitous route performing multiple exec calls through various /usr/local
  # locations). This avoids triggering SIP, so DYLD_LIBRARY_PATH is exposed.
  - DYLD_LIBRARY_PATH=tests/objc "$(pyenv which python)" setup.py test
